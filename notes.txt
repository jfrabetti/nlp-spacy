# 


Things could have done differently

different formulations of tfidf
    - wikipedia shows different weighting schemes, did not weight anything
    - different document but still used global tfidf value rather than document tfidf value

improvement main as class (e.g., "App")
    - class App
        - def main becomes like a process or run
        - json output becomes a member function
        - html output becomes a member function

# tfidfN ends up being the same as docN

Don't put asserts in production code, create logging.error

Maybe better naming, wordD could have been docVocabularyD, and doc could be spacy_doc

Could have made default arguments for my constructors, but didn't because they were only called in one place and did not have arguments at that point

Q: Why make DocTerm a class? A: cleaner

Did not put django front end on it based on feedback from Harsha

Could have used NLTK, Gensim, BERT
    - spacy made for production
    - not enough time for BERT

Pylint complaining about variable naming convention, but like my variables this way

Per document output (wanky?)
    - five biggest things in each document rather than global output

Include unit test file

Rather than hard coding corpusKeyWordCount (e.g, 25), TF-IDF Elbow calculation (visualization) to determine elbox point (different ways of doing)
    - words (corpusD) sorted by tfidf on x axis
    - tfidf on y axis
    - look for elbow


if name = main
    name is a variable 


.items() for dictionaries